version: '3.9'

services:
  rmf-simulator:
    build: .
    ports:
      - "8000:8000"
    environment:
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc_dir
      - LOG_LEVEL=INFO

      # MySQL Configuration
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=rmf_monitoring
      - MYSQL_USER=rmf_user
      - MYSQL_PASSWORD=rmf_password
      - MYSQL_ROOT_PASSWORD=root_password

      # MongoDB Configuration
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DATABASE=rmf_monitoring
      - MONGO_USERNAME=rmf_user
      - MONGO_PASSWORD=rmf_password
      - MONGO_AUTH_SOURCE=rmf_monitoring

      # S3/MinIO Configuration
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY=rmf_user
      - S3_SECRET_KEY=rmf_password123
      - S3_BUCKET_NAME=rmf-metrics
      - S3_REGION=us-east-1
      - S3_USE_SSL=false
    volumes:
      - prometheus_data:/tmp/prometheus_multiproc_dir
    restart: no
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - monitoring

  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=rmf_monitoring
      - MYSQL_USER=rmf_user
      - MYSQL_PASSWORD=rmf_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d
    command: >
      --default-authentication-plugin=caching_sha2_password
      --innodb-buffer-pool-size=512M
      --max-connections=1000
      --slow-query-log=1
      --slow-query-log-file=/var/lib/mysql/slow.log
      --long-query-time=2
      --sql-mode=ONLY_FULL_GROUP_BY,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
    restart: no
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-hlocalhost", "-uroot", "-proot_password"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 60s

  mongodb:
    image: mongo:8.0
    restart: no
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin_password
      MONGO_INITDB_DATABASE: rmf_monitoring
      MONGO_USER: rmf_user
      MONGO_PASSWORD: rmf_password
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: ["mongod", "--auth", "--bind_ip_all"]

  # MinIO S3-compatible storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
      - MINIO_DEFAULT_BUCKETS=rmf-metrics
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: no
    networks:
      - monitoring

  # MinIO Client for bucket initialization
  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to be ready...';
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/rmf-metrics --ignore-existing;
      /usr/bin/mc anonymous set public myminio/rmf-metrics;
      echo 'Creating rmf_user...';
      /usr/bin/mc admin user add myminio rmf_user rmf_password123;
      echo 'Attaching policies...';
      /usr/bin/mc admin policy create myminio rmf-policy /tmp/policies.json;
      /usr/bin/mc admin policy attach myminio rmf-policy --user rmf_user;
      echo 'MinIO initialization completed! Exiting Successfully!';
      exit 0;
      "
    volumes:
      - ./minio-policies:/tmp
    networks:
      - monitoring

  # Web UI for MinIO management
  minio-console:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./minio-policies/nginx-minio.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - minio
    restart: no
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/etc/prometheus
      - prometheus_storage:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    depends_on:
      - rmf-simulator
    restart: no
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - grafana_storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: no
    networks:
      - monitoring

  alertmanager:
    image: prom/alertmanager:v0.26.0
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_storage:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: no
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  mysql_data:
  mongodb_data:
  minio_data:
  prometheus_data:
  prometheus_storage:
  grafana_storage:
  alertmanager_storage: